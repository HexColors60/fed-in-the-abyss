.TH "include/fita.h" 3 "Thu Aug 9 2018" "Version v0.3-alpha" "fed-in-the-abyss" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/fita.h
.SH SYNOPSIS
.br
.PP
\fC#include <ncurses\&.h>\fP
.br
\fC#include 'cursor\&.h'\fP
.br
\fC#include 'maps\&.h'\fP
.br
\fC#include 'enemy\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBN_COLS\fP   (COLS \- 40)"
.br
.ti -1c
.RI "#define \fBN_LINES\fP   (LINES \- 10)"
.br
.ti -1c
.RI "#define \fBGET_WIDTH\fP   (((\fBN_COLS\fP % 2) == 0) ? \fBN_COLS\fP \- 1 : \fBN_COLS\fP)"
.br
.ti -1c
.RI "#define \fBGET_HEIGHT\fP   (((\fBN_LINES\fP % 2) == 0) ? \fBN_LINES\fP \- 1 : \fBN_LINES\fP)"
.br
.ti -1c
.RI "#define \fBGET_ARRAY_SIZE\fP(x)   (sizeof(x) / sizeof(x[0]))"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBdirection\fP { \fBUP\fP, \fBRIGHT\fP, \fBDOWN\fP, \fBLEFT\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBmap_t\fP ** \fBinit_level\fP (const char *path)"
.br
.ti -1c
.RI "void \fBdestroy_level\fP (\fBmap_t\fP **maps, char **old_state)"
.br
.ti -1c
.RI "void \fBgame_loop\fP (\fBmap_t\fP **maps, char **old_state)"
.br
.ti -1c
.RI "enum \fBdirection\fP \fBborder_cam\fP (\fBcursor_t\fP *cam)"
.br
.ti -1c
.RI "void \fBcamera\fP (\fBplayer_t\fP *player, WINDOW *win, \fBmap_t\fP **map)"
.br
.ti -1c
.RI "\fBcursor_t\fP \fBmove_charac\fP (int key, \fBcursor_t\fP *pos, \fBcursor_t\fP *cam, char **map)"
.br
.ti -1c
.RI "void \fBattack\fP (\fBenemy_t\fP **enemies, \fBcursor_t\fP *defender, \fBenemy_t\fP *turn, \fBplayer_t\fP *player)"
.br
.ti -1c
.RI "void \fBscreen_charac\fP (\fBplayer_t\fP *player)"
.br
.ti -1c
.RI "void \fBscreen_logs\fP (void)"
.br
.ti -1c
.RI "void \fBscreen_death\fP (void)"
.br
.ti -1c
.RI "void \fBprint_charac\fP (WINDOW *win, \fBcursor_t\fP *pos)"
.br
.ti -1c
.RI "void \fBcentered_map\fP (WINDOW *win, \fBcursor_t\fP *cam, \fBmap_t\fP **maps)"
.br
.ti -1c
.RI "void \fBassign_player\fP (char **map, char **old_state, \fBcursor_t\fP *charac, \fBcursor_t\fP *cam)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBenemy_t\fP \fBpossible_enemies\fP []"
.br
.ti -1c
.RI "int \fBenemies_nb\fP"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define GET_ARRAY_SIZE(x)   (sizeof(x) / sizeof(x[0]))"

.SS "#define GET_HEIGHT   (((\fBN_LINES\fP % 2) == 0) ? \fBN_LINES\fP \- 1 : \fBN_LINES\fP)"
get a good height for the main WINDOW 
.SS "#define GET_WIDTH   (((\fBN_COLS\fP % 2) == 0) ? \fBN_COLS\fP \- 1 : \fBN_COLS\fP)"
get a good width for the main WINDOW 
.SS "#define N_COLS   (COLS \- 40)"

.SS "#define N_LINES   (LINES \- 10)"

.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBdirection\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIUP \fP\fP
.TP
\fB\fIRIGHT \fP\fP
.TP
\fB\fIDOWN \fP\fP
.TP
\fB\fILEFT \fP\fP
.SH "Function Documentation"
.PP 
.SS "void assign_player (char ** map, char ** old_state, \fBcursor_t\fP * charac, \fBcursor_t\fP * cam)"

.PP
\fBParameters:\fP
.RS 4
\fIdouble\fP char ptr x2, cursor ptr x2 
.RE
.PP
\fBReturns:\fP
.RS 4
nothing  assign player to map and backup map's state 
.RE
.PP

.SS "void attack (\fBenemy_t\fP ** enemies, \fBcursor_t\fP * defender, \fBenemy_t\fP * turn, \fBplayer_t\fP * player)"

.SS "enum \fBdirection\fP border_cam (\fBcursor_t\fP * cam)"

.SS "void camera (\fBplayer_t\fP * player, WINDOW * win, \fBmap_t\fP ** map)"

.SS "void centered_map (WINDOW * win, \fBcursor_t\fP * cam, \fBmap_t\fP ** maps)"

.PP
\fBParameters:\fP
.RS 4
\fIthe\fP current WINDOW, the camera position, the map to print 
.RE
.PP
\fBReturns:\fP
.RS 4
nothing  print the map and refresh the screen 
.RE
.PP

.SS "void destroy_level (\fBmap_t\fP ** maps, char ** old_state)"

.SS "void game_loop (\fBmap_t\fP ** maps, char ** old_state)"

.SS "\fBmap_t\fP** init_level (const char * path)"

.SS "\fBcursor_t\fP move_charac (int key, \fBcursor_t\fP * pos, \fBcursor_t\fP * cam, char ** map)"

.SS "void print_charac (WINDOW * win, \fBcursor_t\fP * pos)"

.PP
\fBParameters:\fP
.RS 4
\fIthe\fP current WINDOW, the char to print 
.RE
.PP
\fBReturns:\fP
.RS 4
nothing  print pretty characters using attributes from ncurses 
.RE
.PP

.SS "void screen_charac (\fBplayer_t\fP * player)"

.PP
\fBParameters:\fP
.RS 4
\fI\fP 
.RE
.PP

.SS "void screen_death (void)"

.SS "void screen_logs (void)"

.SH "Variable Documentation"
.PP 
.SS "int enemies_nb"

.SS "\fBenemy_t\fP possible_enemies[]"

.SH "Author"
.PP 
Generated automatically by Doxygen for fed-in-the-abyss from the source code\&.
